version: "3.8"

services:
  users-service:
    image: litestar-users-service:latest
    container_name: litestar-users
    build:
      context: ./users-service/
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./users-service/app/:/service/app/
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  postgres:
    container_name: litestar-users-db
    image: postgres:16-alpine
    restart: on-failure
    env_file: ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 10s
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - ./postgres/docker-entrypoint.sh:/docker-entrypoint-initdb.d/docker-entrypoint.sh
    networks:
      - backend-network

  redis:
    image: redis:latest
    container_name: litestar-users-cache
    restart: on-failure
    env_file: ./.env
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 10s
    expose:
      - "${REDIS_PORT}"
    # volumes:
    #   - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server
    networks:
      - backend-network
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: litestar-message-broker
    restart: on-failure
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 10s
    volumes:
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      # - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - backend-network

  # email_service:
  #   image: email-service:latest
  #   container_name: email-service
  #   build:
  #     context: ./email-service/
  #     dockerfile: Dockerfile
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./email-service/
  #         target: ./app/
  #   ports:
  #     - "50:50"
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #   networks:
  #     - backend

networks:
  backend-network:
    name: backend-network
    driver: bridge
